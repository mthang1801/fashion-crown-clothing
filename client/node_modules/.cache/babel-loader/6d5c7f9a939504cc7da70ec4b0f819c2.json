{"ast":null,"code":"import { call, put, takeLatest, all } from \"redux-saga/effects\";\nimport userActionTypes from \"./user.types\";\nimport { auth, GoogleProvider, createUserProfileDocument, getCurrentUser } from \"../../utils/firebase.util\";\nimport { signInSuccess, signInFailure } from \"./user.actions\";\nexport function* getSnapshotFromUserAuth(userAuth) {\n  console.log(userAuth);\n  const userRef = yield call(createUserProfileDocument, userAuth);\n  const userSnapshot = yield userRef.get();\n  yield put(signInSuccess({\n    id: userSnapshot.id,\n    ...userSnapshot.data()\n  }));\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(GoogleProvider);\n    console.log(user);\n    yield call(getSnapshotFromUserAuth, user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield call(getSnapshotFromUserAuth, user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    console.log(userAuth);\n\n    if (userAuth) {\n      getSnapshotFromUserAuth(userAuth);\n    }\n\n    return;\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* googleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmailStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* checkUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(googleSignInStart), call(signInWithEmailStart), call(checkUserSession)]);\n}","map":{"version":3,"sources":["/home/mvt/Desktop/github/fashion-crown-clothing/src/redux/user/user.saga.js"],"names":["call","put","takeLatest","all","userActionTypes","auth","GoogleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","getSnapshotFromUserAuth","userAuth","console","log","userRef","userSnapshot","get","id","data","signInWithGoogle","user","signInWithPopup","error","message","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","googleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmailStart","EMAIL_SIGN_IN_START","checkUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SACEC,IADF,EAEEC,cAFF,EAGEC,yBAHF,EAIEC,cAJF,QAKO,2BALP;AAMA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4C;AACjDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,QAAMG,OAAO,GAAG,MAAMf,IAAI,CAACO,yBAAD,EAA4BK,QAA5B,CAA1B;AACA,QAAMI,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,QAAMhB,GAAG,CACPQ,aAAa,CAAC;AACZS,IAAAA,EAAE,EAAEF,YAAY,CAACE,EADL;AAEZ,OAAGF,YAAY,CAACG,IAAb;AAFS,GAAD,CADN,CAAT;AAMD;AACD,OAAO,UAAUC,gBAAV,GAA6B;AAClC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMhB,IAAI,CAACiB,eAAL,CAAqBhB,cAArB,CAAvB;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYO,IAAZ;AACA,UAAMrB,IAAI,CAACW,uBAAD,EAA0BU,IAA1B,CAAV;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACd,UAAMtB,GAAG,CAACS,aAAa,CAACa,KAAK,CAACC,OAAP,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUC,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AACjE,MAAI;AACF,UAAM;AAAEP,MAAAA;AAAF,QAAW,MAAMhB,IAAI,CAACwB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAM5B,IAAI,CAACW,uBAAD,EAA0BU,IAA1B,CAAV;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AACd,UAAMtB,GAAG,CAACS,aAAa,CAACa,KAAK,CAACC,OAAP,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUM,mBAAV,GAAgC;AACrC,MAAI;AACF,UAAMlB,QAAQ,GAAG,MAAMJ,cAAc,EAArC;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AACA,QAAIA,QAAJ,EAAc;AACZD,MAAAA,uBAAuB,CAACC,QAAD,CAAvB;AACD;;AACD;AACD,GAPD,CAOE,OAAOW,KAAP,EAAc;AACd,UAAMtB,GAAG,CAACS,aAAa,CAACa,KAAK,CAACC,OAAP,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUO,iBAAV,GAA8B;AACnC,QAAM7B,UAAU,CAACE,eAAe,CAAC4B,oBAAjB,EAAuCZ,gBAAvC,CAAhB;AACD;AAED,OAAO,UAAUa,oBAAV,GAAiC;AACtC,QAAM/B,UAAU,CAACE,eAAe,CAAC8B,mBAAjB,EAAsCT,eAAtC,CAAhB;AACD;AAED,OAAO,UAAUU,gBAAV,GAA6B;AAClC,QAAMjC,UAAU,CAACE,eAAe,CAACgC,kBAAjB,EAAqCN,mBAArC,CAAhB;AACD;AAED,OAAO,UAAUO,SAAV,GAAsB;AAC3B,QAAMlC,GAAG,CAAC,CACRH,IAAI,CAAC+B,iBAAD,CADI,EAER/B,IAAI,CAACiC,oBAAD,CAFI,EAGRjC,IAAI,CAACmC,gBAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["import { call, put, takeLatest, all } from \"redux-saga/effects\";\nimport userActionTypes from \"./user.types\";\nimport {\n  auth,\n  GoogleProvider,\n  createUserProfileDocument,\n  getCurrentUser,\n} from \"../../utils/firebase.util\";\nimport { signInSuccess, signInFailure } from \"./user.actions\";\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n  console.log(userAuth);\n  const userRef = yield call(createUserProfileDocument, userAuth);\n  const userSnapshot = yield userRef.get();\n  yield put(\n    signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data(),\n    })\n  );\n}\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(GoogleProvider);\n    console.log(user);\n    yield call(getSnapshotFromUserAuth, user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    yield call(getSnapshotFromUserAuth, user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    console.log(userAuth);\n    if (userAuth) {\n      getSnapshotFromUserAuth(userAuth);\n    }\n    return;\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\n\nexport function* googleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* signInWithEmailStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* checkUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* userSagas() {\n  yield all([\n    call(googleSignInStart),\n    call(signInWithEmailStart),\n    call(checkUserSession),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}